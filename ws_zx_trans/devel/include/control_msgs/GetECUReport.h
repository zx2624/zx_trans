// Generated by gencpp from file control_msgs/GetECUReport.msg
// DO NOT EDIT!


#ifndef CONTROL_MSGS_MESSAGE_GETECUREPORT_H
#define CONTROL_MSGS_MESSAGE_GETECUREPORT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <control_msgs/ModeReport.h>
#include <control_msgs/SteerReport.h>
#include <control_msgs/GearReport.h>
#include <control_msgs/GearReport.h>
#include <control_msgs/BrakeReport.h>
#include <control_msgs/ThrottleReport.h>
#include <control_msgs/SpeedReport.h>
#include <control_msgs/HMIReport.h>

namespace control_msgs
{
template <class ContainerAllocator>
struct GetECUReport_
{
  typedef GetECUReport_<ContainerAllocator> Type;

  GetECUReport_()
    : header()
    , mode()
    , steer_cur()
    , shift_cur()
    , shift1_cur()
    , brake_cur()
    , throttle_cur()
    , speed()
    , manual()  {
    }
  GetECUReport_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , mode(_alloc)
    , steer_cur(_alloc)
    , shift_cur(_alloc)
    , shift1_cur(_alloc)
    , brake_cur(_alloc)
    , throttle_cur(_alloc)
    , speed(_alloc)
    , manual(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::control_msgs::ModeReport_<ContainerAllocator>  _mode_type;
  _mode_type mode;

   typedef  ::control_msgs::SteerReport_<ContainerAllocator>  _steer_cur_type;
  _steer_cur_type steer_cur;

   typedef  ::control_msgs::GearReport_<ContainerAllocator>  _shift_cur_type;
  _shift_cur_type shift_cur;

   typedef  ::control_msgs::GearReport_<ContainerAllocator>  _shift1_cur_type;
  _shift1_cur_type shift1_cur;

   typedef  ::control_msgs::BrakeReport_<ContainerAllocator>  _brake_cur_type;
  _brake_cur_type brake_cur;

   typedef  ::control_msgs::ThrottleReport_<ContainerAllocator>  _throttle_cur_type;
  _throttle_cur_type throttle_cur;

   typedef  ::control_msgs::SpeedReport_<ContainerAllocator>  _speed_type;
  _speed_type speed;

   typedef  ::control_msgs::HMIReport_<ContainerAllocator>  _manual_type;
  _manual_type manual;





  typedef boost::shared_ptr< ::control_msgs::GetECUReport_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control_msgs::GetECUReport_<ContainerAllocator> const> ConstPtr;

}; // struct GetECUReport_

typedef ::control_msgs::GetECUReport_<std::allocator<void> > GetECUReport;

typedef boost::shared_ptr< ::control_msgs::GetECUReport > GetECUReportPtr;
typedef boost::shared_ptr< ::control_msgs::GetECUReport const> GetECUReportConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control_msgs::GetECUReport_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control_msgs::GetECUReport_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/kinetic/share/nav_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'sensor_driver_msgs': ['/home/zx/test/ws_zx_trans/src/msgs/sensor_driver_msgs/msg'], 'control_msgs': ['/home/zx/test/ws_zx_trans/src/msgs/control_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::GetECUReport_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control_msgs::GetECUReport_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::GetECUReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control_msgs::GetECUReport_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::GetECUReport_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control_msgs::GetECUReport_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control_msgs::GetECUReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "83102858bdab6b0e68d7ca00281fe1a4";
  }

  static const char* value(const ::control_msgs::GetECUReport_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x83102858bdab6b0eULL;
  static const uint64_t static_value2 = 0x68d7ca00281fe1a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::control_msgs::GetECUReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control_msgs/GetECUReport";
  }

  static const char* value(const ::control_msgs::GetECUReport_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control_msgs::GetECUReport_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
control_msgs/ModeReport mode\n\
\n\
control_msgs/SteerReport steer_cur\n\
\n\
control_msgs/GearReport shift_cur\n\
control_msgs/GearReport shift1_cur\n\
\n\
control_msgs/BrakeReport brake_cur\n\
control_msgs/ThrottleReport throttle_cur # include engine_status\n\
\n\
control_msgs/SpeedReport speed\n\
\n\
control_msgs/HMIReport manual\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: control_msgs/ModeReport\n\
Header header\n\
\n\
int32 auto_mode\n\
\n\
int32 speed_mode\n\
bool throttle_enable\n\
bool brake_enable\n\
\n\
int32 steer_mode\n\
int32 gear_mode\n\
\n\
\n\
================================================================================\n\
MSG: control_msgs/SteerReport\n\
Header header\n\
float32 steer\n\
\n\
================================================================================\n\
MSG: control_msgs/GearReport\n\
Header header\n\
uint8 gear\n\
\n\
================================================================================\n\
MSG: control_msgs/BrakeReport\n\
Header header\n\
\n\
float32 brake_ESC_left\n\
float32 brake_ESC_right\n\
\n\
control_msgs/WheelStateReport brake_wheel\n\
\n\
float32 brake_pedal\n\
\n\
================================================================================\n\
MSG: control_msgs/WheelStateReport\n\
Header header\n\
\n\
float32 front_left\n\
float32 front_right\n\
float32 rear_left\n\
float32 rear_right\n\
\n\
================================================================================\n\
MSG: control_msgs/ThrottleReport\n\
Header header\n\
float32 throttle\n\
control_msgs/EngineReport engine_status\n\
float32 throttle_pedal\n\
\n\
================================================================================\n\
MSG: control_msgs/EngineReport\n\
Header header\n\
float32 engine_rpm\n\
float32 engine_load\n\
\n\
================================================================================\n\
MSG: control_msgs/SpeedReport\n\
Header header\n\
\n\
control_msgs/WheelStateReport speed_wheel\n\
geometry_msgs/Twist velocity\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: control_msgs/HMIReport\n\
Header header\n\
\n\
bool manual_estop\n\
bool is_human_brake \n\
";
  }

  static const char* value(const ::control_msgs::GetECUReport_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control_msgs::GetECUReport_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.mode);
      stream.next(m.steer_cur);
      stream.next(m.shift_cur);
      stream.next(m.shift1_cur);
      stream.next(m.brake_cur);
      stream.next(m.throttle_cur);
      stream.next(m.speed);
      stream.next(m.manual);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetECUReport_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control_msgs::GetECUReport_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control_msgs::GetECUReport_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "mode: ";
    s << std::endl;
    Printer< ::control_msgs::ModeReport_<ContainerAllocator> >::stream(s, indent + "  ", v.mode);
    s << indent << "steer_cur: ";
    s << std::endl;
    Printer< ::control_msgs::SteerReport_<ContainerAllocator> >::stream(s, indent + "  ", v.steer_cur);
    s << indent << "shift_cur: ";
    s << std::endl;
    Printer< ::control_msgs::GearReport_<ContainerAllocator> >::stream(s, indent + "  ", v.shift_cur);
    s << indent << "shift1_cur: ";
    s << std::endl;
    Printer< ::control_msgs::GearReport_<ContainerAllocator> >::stream(s, indent + "  ", v.shift1_cur);
    s << indent << "brake_cur: ";
    s << std::endl;
    Printer< ::control_msgs::BrakeReport_<ContainerAllocator> >::stream(s, indent + "  ", v.brake_cur);
    s << indent << "throttle_cur: ";
    s << std::endl;
    Printer< ::control_msgs::ThrottleReport_<ContainerAllocator> >::stream(s, indent + "  ", v.throttle_cur);
    s << indent << "speed: ";
    s << std::endl;
    Printer< ::control_msgs::SpeedReport_<ContainerAllocator> >::stream(s, indent + "  ", v.speed);
    s << indent << "manual: ";
    s << std::endl;
    Printer< ::control_msgs::HMIReport_<ContainerAllocator> >::stream(s, indent + "  ", v.manual);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MSGS_MESSAGE_GETECUREPORT_H
